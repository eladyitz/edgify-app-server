// Code generated by MockGen. DO NOT EDIT.
// Source: internal/types.go

// Package app_service_mock is a generated GoMock package.
package app_service_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	internal "github.wdf.sap.corp/i350641/edgify-app-server/internal"
)

// MockExecClient is a mock of ExecClient interface.
type MockExecClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecClientMockRecorder
}

// MockExecClientMockRecorder is the mock recorder for MockExecClient.
type MockExecClientMockRecorder struct {
	mock *MockExecClient
}

// NewMockExecClient creates a new mock instance.
func NewMockExecClient(ctrl *gomock.Controller) *MockExecClient {
	mock := &MockExecClient{ctrl: ctrl}
	mock.recorder = &MockExecClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecClient) EXPECT() *MockExecClientMockRecorder {
	return m.recorder
}

// ProcessOrder mocks base method.
func (m *MockExecClient) ProcessOrder(or internal.OrderRequest) internal.OrderStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", or)
	ret0, _ := ret[0].(internal.OrderStatus)
	return ret0
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockExecClientMockRecorder) ProcessOrder(or interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockExecClient)(nil).ProcessOrder), or)
}

// Run mocks base method.
func (m *MockExecClient) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockExecClientMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExecClient)(nil).Run))
}
